{"version":3,"file":"index.js","sources":["../scripts/WorkerLoaderHelper.js","../src/index.js"],"sourcesContent":["const kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\nconst kRequire = kIsNodeJS ? module.require : null; // eslint-disable-line\n\nexport function createInlineWorkerFactory(fn, sourcemap = null) {\n    const source = fn.toString();\n    const start = source.indexOf('\\n', 10) + 1;\n    const end = source.indexOf('}', source.length - 1);\n    const body = source.substring(start, end) + (sourcemap ? `//# sourceMappingURL=${sourcemap}` : '');\n    const blankPrefixLength = body.search(/\\S/);\n    const lines = body.split('\\n').map(line => line.substring(blankPrefixLength) + '\\n');\n\n    if (kIsNodeJS) {\n        /* node.js */\n        const Worker = kRequire('worker_threads').Worker; // eslint-disable-line\n        const concat = lines.join('\\n');\n        return function WorkerFactory(options) {\n            return new Worker(concat, Object.assign({}, options, { eval: true }));\n        };\n    }\n\n    /* browser */\n    const blob = new Blob(lines, { type: 'application/javascript' });\n    const url = URL.createObjectURL(blob);\n    return function WorkerFactory(options) {\n        return new Worker(url, options);\n    };\n}\n\nexport function createURLWorkerFactory(url) {\n    if (kIsNodeJS) {\n        /* node.js */\n        const Worker = kRequire('worker_threads').Worker; // eslint-disable-line\n        return function WorkerFactory(options) {\n            return new Worker(url, options);\n        };\n    }\n    /* browser */\n    return function WorkerFactory(options) {\n        return new Worker(url, options);\n    };\n}\n\nexport function createBase64WorkerFactory(base64, sourcemap = null) {\n    const source = kIsNodeJS ? Buffer.from(base64, 'base64').toString('ascii') : atob(base64);\n    const start = source.indexOf('\\n', 10) + 1;\n    const body = source.substring(start) + (sourcemap ? `//# sourceMappingURL=${sourcemap}` : '');\n\n    if (kIsNodeJS) {\n        /* node.js */\n        const Worker = kRequire('worker_threads').Worker; // eslint-disable-line\n        return function WorkerFactory(options) {\n            return new Worker(body, Object.assign({}, options, { eval: true }));\n        };\n    }\n\n    /* browser */\n    const blob = new Blob([body], { type: 'application/javascript' });\n    const url = URL.createObjectURL(blob);\n    return function WorkerFactory(options) {\n        return new Worker(url, options);\n    };\n}\n","import DataWorker from 'web-worker:./worker';\nimport Requests from './worker/Requests.js';\n \nconst dataWorker = new DataWorker();\n\n//dataWorker.postMessage('Hello World!');\nconst Utils = {\n\tsaveState: (data, key) => {\n\t\tkey = key || 'Forest_';\n\t\twindow.localStorage.setItem(key, JSON.stringify(data));\n\t},\n\tgetState: key => {\n\t\tkey = key || 'Forest_';\n\t\treturn JSON.parse(window.localStorage.getItem(key)) || {};\n\t},\n\n\tisDelynkaLayer: (it) => {\n\t\tlet out = false;\n\t\tif (it._gmx) {\n\t\t\tlet attr = it._gmx.tileAttributeTypes;\n\t\t\tout = attr.snap && attr.FRSTAT;\n\t\t}\n\t\treturn out;\n\t},\n\tisKvartalLayer: (it) => {\n\t\tlet out = false;\n\t\tif (it._gmx) {\n\t\t\tlet attr = it._gmx.tileAttributeTypes;\n\t\t\tout = attr.kv;\n\t\t}\n\t\treturn out;\n\t},\n\tgetLayerItems: (it, opt) => {\n\t\tdataWorker.onmessage = (res) => {\n\t\t\tlet data = res.data,\n\t\t\t\tcmd = data.cmd,\n\t\t\t\tjson = data.out,\n\t\t\t\ttype = opt && opt.type || 'delynka';\n\n\t\t\tif (cmd === 'getLayerItems') {\n\t\t\t\tif (type === 'delynka') {\n\t\t\t\t\tdelItems.set(json.Result);\n\t\t\t\t} else {\n\t\t\t\t\tkvItems.set(json.Result);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log('onmessage', res);\n\t\t};\n\t\tdataWorker.postMessage({cmd: 'getLayerItems', layerID: it.options.layerID, opt: opt});\n\t},\n\tgetReportsCount: (opt) => {\n\t\tdataWorker.onmessage = (res) => {\n\t\t\tlet data = res.data,\n\t\t\t\tcmd = data.cmd,\n\t\t\t\tjson = data.out;\n\n\t\t\tif (cmd === 'getReportsCount') {\n\t\t\t\treportsCount.set(json);\n\t\t\t}\n\t\t};\n\t\tdataWorker.postMessage({cmd: 'getReportsCount', opt: opt});\n\t},\n\tgetMap: (opt) => {\n        return new Promise((resolve, reject) => {\n\n\t\t\tdataWorker.onmessage = (res) => {\n\t\t\t\tlet data = res.data,\n\t\t\t\t\tcmd = data.cmd,\n\t\t\t\t\tjson = data.out;\n\n\t\t\t\tif (cmd === 'getMap') {\n\t\t\t\t\tmapTree.set(json);\n\t\t\t\t}\n\t\t// console.log('onmessage', json);\n\t\t\t};\n\t\t\tlet pars = Requests.parseURLParams(location.search);\n\t\t\tdataWorker.postMessage({cmd: 'getMap', mapID: pars.main.length ? pars.main[0] : mapID, search: location.search});\n\t\t});\n\t}\n\n};\n\n// export {dataWorker, Utils};\n"],"names":["dataWorker","DataWorker"],"mappings":";;;IAAA,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,OAAO,KAAK,WAAW,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,kBAAkB,CAAC;IACtH,MAAM,QAAQ,GAAG,SAAS,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AACnD,AAyBA;AACA,IAAO,SAAS,sBAAsB,CAAC,GAAG,EAAE;IAC5C,IAAI,IAAI,SAAS,EAAE;IACnB;IACA,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;IACzD,QAAQ,OAAO,SAAS,aAAa,CAAC,OAAO,EAAE;IAC/C,YAAY,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC5C,SAAS,CAAC;IACV,KAAK;IACL;IACA,IAAI,OAAO,SAAS,aAAa,CAAC,OAAO,EAAE;IAC3C,QAAQ,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACxC,KAAK,CAAC;IACN,CAAC;;;;;;ICrCD,MAAMA,UAAU,GAAG,IAAIC,aAAJ,EAAnB;;;;;"}